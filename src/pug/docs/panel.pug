extends ../_docs-template

block vars
  - var title = 'Panel / Side Panels | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Panel / Side Panels
    ul.docs-index
    h2 Panel Layout
    p Let's look how to add Side Panels to our App. We may include up to 2 panels to our App, one on left side and another one on right side. We should add panels' HTML right in the beginning of the app root element (or `<body>` in case there is no root element in use):
    :code(lang="html")
      <body>
        <!-- App root element -->
        <div id="app">
          <!-- Left panel -->
          <div class="panel panel-left">
              ... panel content goes here ...
          </div>

          <!-- Right panel -->
          <div class="panel panel-right">
              ... panel content goes here ...
          </div>

          ...
        </div>
      </body>
    p After we added panels we need to choose opening effect for each panel. There could be one of two effects: <b>"Reveal"</b> (when panel moves out whole app's content) or <b>"Cover"</b> (when panel overlays app's content). If you want to use "Reveal" effect you should add additional `panel-reveal` class to Panel, or `panel-cover` for cover effect:
    :code(lang="html")
      <body>
        <!-- App root element -->
        <div id="app">
          <!-- Left panel, let it be with reveal effect -->
          <div class="panel panel-left panel-reveal">
              ... panel content goes here ...
          </div>

          <!-- Right panel, with cover effect -->
          <div class="panel panel-right panel-cover">
              ... panel content goes here ...
          </div>

          ...
        </div>
      </body>
    p Each Panel can be resizable. To make Panel resizable we just need to add `panel-resizable` class to Panel element:
    :code(lang="html")
      <body>
        <!-- App root element -->
        <div id="app">
          <!-- Make left panel resizable -->
          <div class="panel panel-left panel-resizable">
              ... panel content goes here ...
          </div>

          <!-- Make right panel resizable -->
          <div class="panel panel-right panel-resizable">
              ... panel content goes here ...
          </div>
          ...
        </div>
      </body>

    h2 Panel App Methods
    p Let's look at related App methods to work with Panel:
    .method-wrap
      p
        span.method app.panel.create(<span>parameters</span>)
        | - create Panel instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with panel parameters
      p.method-returns Method returns created Panel's instance

    .method-wrap
      p
        span.method app.panel.destroy(<span>el</span>)
        | - destroy Panel instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Panel element or Panel instance to destroy.
    .method-wrap
      p
        span.method app.panel.get(<span>el</span>)
        | - get Panel instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Panel element.
      p.method-returns Method returns Panel's instance
    .method-wrap
      p
        span.method app.panel.open(<span>panel, animate</span>)
        | - open panel
      ul.method-parameters
        li
          span.parameter panel
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of panel element to open
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Should it be opened with animation or not. Optional, by default is `true`
    .method-wrap
      p
        span.method app.panel.close(<span>panel, animate</span>)
        | - close panel
      ul.method-parameters
        li
          span.parameter panel
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of panel element to close
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Should it be closed with animation or not. Optional, by default is `true`
    .method-wrap
      p
        span.method app.panel.toggle(<span>panel, animate</span>)
        | - toggle panel
      ul.method-parameters
        li
          span.parameter panel
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of panel element to toggle
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Should it be opened/closed with animation or not. Optional, by default is `true`

    h2 Panel Parameters
    p If we create Panel manually using `app.panel.create` method we need to pass object with panel parameters:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement
          td
          td Panel element
        tr
          td resizable
          td boolean
          td
          td Enables resizable panel. If not passed then will be determined based on `panel-resizable` class.
        tr
          td visibleBreakpoint
          td number
          td
          td Minimal app width (in px) when left panel becomes always visible
        tr
          td collapsedBreakpoint
          td number
          td
          td Minimal app width (in px) when left panel becomes partially visible (collapsed)
        tr
          td swipe
          td boolean
          td false
          td Enable if you want to enable ability to open/close panel with swipe
        tr
          td swipeNoFollow
          td boolean
          td false
          td Fallback option for potentially better performance on old/slow devices. If you enable it, then swipe panel will not follow your finger during touch move, it will be automatically opened/closed on swipe left/right.
        tr
          td swipeActiveArea
          td number
          td 0
          td Width (in px) of invisible edge from the screen that triggers panel swipe
        tr
          td swipeOnlyClose
          td boolean
          td false
          td This parameter allows to close (but not open) panel with swipes. (`swipe` should be also enabled)
        tr
          td swipeThreshold
          td number
          td 0
          td Panel will not move with swipe if "touch distance" will be less than this value (in px).
        tr
          td backdrop
          td boolean
          td true
          td Enables Panel backdrop (dark semi transparent layer behind)
        tr
          td backdropEl
          td HTMLElement<br>string
          td
          td HTML element or string CSS selector of custom backdrop element
        tr
          td closeByBackdropClick
          td boolean
          td true
          td Enable/disable ability to close panel by clicking outside of panel
        tr
          td containerEl
          td HTMLElement<br>string
          td
          td Allows to mount the panel to custom element rather than app root element
        tr
          td on
          td object
          td
          td
            p Object with events handlers. For example:
            :code(lang="js")
                  var panel = app.panel.create({
                    el: '.panel-left',
                    on: {
                      opened: function () {
                        console.log('Panel opened')
                      }
                    }
                  })

    p For example:
    :code(lang="js")
      var panel = app.panel.create({
        el: '.panel-left',
        resizable: true,
        visibleBreakpoint: 1024,
        collapsedBreakpoint: 768,
      })

    .important-note
      p Note that all following parameters can be used in global app parameters under `panel` property to set defaults for all panels. For example:
      :code(lang="js")
            var app = new Framework7({
              panel: {
                swipe: true,
                visibleBreakpoint: 1024,
              }
            });

    h2 Panel Methods & Properties
    p After we created Panel instance (by calling `app.panel.create`) or after we got Panel instance (by calling `app.panel.get`) we may use its useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td panel.app
          td Link to global app instance
        tr
          td panel.side
          td String with panel side: `left` or `right`
        tr
          td panel.effect
          td String with panel effect: `cover` or `reveal`
        tr
          td panel.opened
          td Boolean property indicating whether it is opened or not
        tr
          td panel.el
          td Panel HTML element
        tr
          td panel.$el
          td Dom7 instance with panel HTML element
        tr
          td panel.backdropEl
          td Backdrop HTML element
        tr
          td panel.$backdropEl
          td Dom7 instance with backdrop HTML element
        tr
          td panel.params
          td Panel parameters
        tr
          td panel.containerEl
          td Element to mount panel to. (default `app.root`)
        tr
          td panel.$containerEl
          td Dom7 instance with element to mount panel to. (default `app.root`)
        tr
          th(colspan="2") Methods
        tr
          td panel.open(<span>animate</span>)
          td Open panel. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default `true`) - defines whether it should be opened with animation or not
        tr
          td panel.close(<span>animate</span>)
          td Close panel. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default `true`) - defines whether it should be closed with animation or not
        tr
          td panel.toggle(<span>animate</span>)
          td Toggle panel. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default `true`) - defines whether it should be closed with animation or not

        tr
          td panel.enableVisibleBreakpoint()
          td Enable visible breakpoint
        tr
          td panel.disableVisibleBreakpoint()
          td Disable visible breakpoint
        tr
          td panel.toggleVisibleBreakpoint()
          td Toggle visible breakpoint
        tr
          td panel.enableCollapsedBreakpoint()
          td Enable collapsed breakpoint
        tr
          td panel.disableCollapsedBreakpoint()
          td Disable collapsed breakpoint
        tr
          td panel.toggleCollapsedBreakpoint()
          td Toggle collapsed breakpoint
        tr
          td panel.enableResizable()
          td Enable resizable panel
        tr
          td panel.disableResizable()
          td Disable resizable panel
        tr
          td panel.enableSwipe()
          td Enable swipeable panel
        tr
          td panel.disableSwipe()
          td Disable swipeable panel
        tr
          td panel.destroy()
          td Destroy panel instance
        tr
          td panel.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td panel.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td panel.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td panel.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td panel.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
    h2 Panel Events
    p Panel will fire the following DOM events on panel element and events on app and panel instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td panel:open
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered when Panel starts its opening animation
        tr
          td panel:opened
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered after Panel completes its opening animation
        tr
          td panel:close
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered when Panel starts its closing animation
        tr
          td panel:closed
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered after Panel completes its closing animation
        tr
          td panel:backdrop-click
          td Panel Overlay Element<span>&lt;div class="panel-backdrop"&gt;</span></td>
          td Event will be triggered when the panel overlay is clicked
        tr
          td panel:swipeopen
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered in the very beginning of opening it with swipe
        tr
          td panel:swipe
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered for swipe panel during touch swipe action
        tr
          td panel:collapsedbreakpoint
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered when it becomes visible/hidden when app width matches its `collapsedBreakpoint`
        tr
          td panel:breakpoint
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered when it becomes visible/hidden when app width matches its `visibleBreakpoint`
        tr
          td panel:resize
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered on resizable panel resize
        tr
          td panel:beforedestroy
          td Panel Element<span>&lt;div class="panel"&gt;</span>
          td Event will be triggered right before Panel instance will be destroyed
    h3 App and Panel Instance Events
    p Panel instance emits events on both self instance and app instance. App instance events has same names prefixed with `panel`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td open
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered when Panel starts its opening animation. As an argument event handler receives panel instance
        tr
          td panelOpen
          td app
          td <span>(panel)</span>
        tr
          td opened
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered when Panel completes its opening animation. As an argument event handler receives panel instance
        tr
          td panelOpened
          td app
          td <span>(panel)</span>
        tr
          td close
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered when Panel starts its closing animation. As an argument event handler receives panel instance
        tr
          td panelClose
          td app
          td <span>(panel)</span>
        tr
          td closed
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered when Panel completes its closing animation. As an argument event handler receives panel instance
        tr
          td panelClosed
          td app
          td <span>(panel)</span>
        tr
          td backdropClick
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered when the panel backdrop is clicked. As an argument event handler receives panel instance
        tr
          td panelBackdropClick
          td app
          td <span>(panel)</span>
        tr
          td swipeOpen
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered in the very beginning of opening it with swipe. As an argument event handler receives panel instance
        tr
          td panelSwipeOpen
          td app
          td <span>(panel)</span>
        tr
          td swipe
          td panel
          td <span>(panel, progress)</span>
          td(rowspan="2") Event will be triggered for swipe panel during touch swipe action. As an argument event handler receives panel instance and opened progress (from 0 to 1)
        tr
          td panelSwipe
          td app
          td <span>(panel, progress)</span>
        tr
          td collapsedBreakpoint
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered when it becomes visible/hidden when app width matches its `collapsedBreakpoint`. As an argument event handler receives panel instance
        tr
          td panelCollapsedBreakpoint
          td app
          td <span>(panel)</span>
        tr
          td breakpoint
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered when it becomes visible/hidden when app width matches its `visibleBreakpoint`. As an argument event handler receives panel instance
        tr
          td panelBreakpoint
          td app
          td <span>(panel)</span>
        tr
          td resize
          td panel
          td <span>(panel, newPanelWidth)</span>
          td(rowspan="2") Event will be triggered on resizable panel resize
        tr
          td panelResize
          td app
          td <span>(panel)</span>
        tr
          td beforeDestroy
          td panel
          td <span>(panel)</span>
          td(rowspan="2") Event will be triggered right before Panel instance will be destroyed
        tr
          td panelBeforeDestroy
          td app
          td <span>(panel)</span>

    h2 Panel Auto Initialization
    p If you don't need to use Panel API and your Panel is inside of the app on init or inside of the page and presented in DOM on moment of page initialization then it can be auto initialized with just adding additional `panel-init` class:
    :code(lang="html")
      <!-- Add panel-init class -->
      <div class="panel panel-left panel-cover panel-init">
        ...
      </div>
    p In this case if you need to access created Panel instance you can use the `app.panel.get` app method:
    :code(lang="js")
      var panel = app.panel.get('.panel-left');

      if (panel.opened) {
        // do something
      }
    p When using auto init you may need to pass additional parameters. It can be done with `data-` attributes on panel element.
    :code(lang="html")
      <!-- parameters set via data- attributes -->
      <div
        class="panel panel-left panel-reveal panel-init"
        data-collapsed-breakpoint="768"
        data-visible-breakpoint="1024"
        data-swipe="true"
      >
        ...
      </div>
    .important-note
      p Parameters used in camelCase, for example <b>visibleBreakpoint</b>, in data- attributes should be used in kebab-case as <b>data-visible-breakpoint</b>


    h2 Control Panel With Links
    p It is possible to open and close required panel (if you have them in DOM) using special classes and data attributes on links:
    .important-note
      ul
        li
          p To open panel we need to add `panel-open` class to any HTML element (prefered to link)
        li
          p To close panel we need to add `panel-close` class to any HTML element (prefered to link)
        li
          p To toggle panel we need to add `panel-toggle` class to any HTML element (prefered to link)
        li
          p If you want to specify which panel should opened/closed, then it could be done via additional `data-panel=".panel-left"` attribute on this HTML element. This attribute can also receive just `left` or `right` value if there is only one panel of such side in DOM.
    p According to above note:
    :code(lang="html")
      <body>
        <div id="app">
          <!-- Left Panel with Reveal effect -->
          <div class="panel panel-left panel-reveal panel-init">
            <div class="block">
              ...
              <!-- Clicking on link with "panel-close" class will close panel -->
              <p><a href="#" class="panel-close">Close me</a></p>
              <!-- Click on link with "panel-open" and data-panel=".panel-right" attribute will open Right panel -->
              <p><a href="#" data-panel=".panel-right" class="panel-open">Open Right Panel</a></p>
            </div>
          </div>

          <!-- Right Panel with Cover effect -->
          <div class="panel panel-right panel-cover panel-init">
            <div class="block">
              ...
              <!-- Click on link with "panel-close" class will close panel -->
              <p><a href="#" class="panel-close">Close me</a></p>
              <!-- Click on link with "panel-open" and data-panel=".panel-left" attribute will open Left panel -->
              <p><a href="#" data-panel=".panel-left" class="panel-open">Open Left Panel</a></p>
            </div>
          </div>

          ...
          <div class="page-content">
            <div class="block">
              <!-- Click on link with "panel-open" and data-panel=".panel-left" attribute will open Left panel -->
              <p><a href="#" data-panel=".panel-left" class="panel-open">Open Left Panel</a></p>
              <!-- Click on link with "panel-open" and data-panel=".panel-right" attribute will open Right panel -->
              <p><a href="#" data-panel=".panel-right" class="panel-open">Open Right Panel</a></p>
            </div>
          </div>
        </div>
        ...
      </body>
    h2 Routable Panels
    p Panels can also be routable with same features as for routable modals and pages:
    ul
      li it provides opportunity to open Panel by usual links instead of so called special links or API,
      li with enabled Push State, the same Panel will be opened when you refresh browser, navigate back and forward in history,
      li with routable Panels you can load Panel itself and its content in the same ways as for pages and modals, i.e. using `url`, `content`, `template`, `templateUrl`, `component` or `componentUrl`
    :code(lang="js")
      routes = [
        ...
        // Creates Panel from passed HTML string
        // Url : <a href="/left-panel/" class="link">
        {
          path: '/left-panel/',
          panel: {
            content: `
              <div class="panel panel-left panel-cover">
                <div class="view">
                  <div class="page">
                    ...
                  </div>
                </div>
              </div>
            `
          }
        },
        // Load Panel from file via Ajax
        // Url : <a href="/right-panel-ajax/" class="link">
        {
          path: '/right-panel-ajax/',
          panel: {
            url: './right-panel.html',
            /* right-panel.html contains:
            <div class="panel panel-right panel-reveal">
              <div class="view">
                <div class="page">
                  ...
                </div>
              </div>
            </div>
            */
          },
        },
        // Load Panel from component file
        // Url : <a href="/panel-component/" class="link">
        {
          path: '/panel-component/',
          panel: {
            componentUrl: './panel-component.html',
            /* panel-component.html contains:
            <template>
              <div class="panel panel-left panel-cover">
                <div class="view">
                  <div class="page">
                    ...
                  </div>
                </div>
              </div>
            </template>
            <style>...</style>
            <script>...</script>
            */
          },
        },
      ]
    p According to example above:
    ul
      li when you click on link with `/left-panel/` href attribute it will open Panel from specified string content,
      li when you click on link with `/right-panel-ajax/` href attribute it will perform Ajax request to `right-panel.html` file and open it as a Right Panel,
      li when you click on link with `/panel-component/` href attribute it will perform Ajax request to `panel-component.html` file, parse it as a Router Component and open it as a Panel,

    +cssVars('panel')

    .with-device
      h2(data-device-preview="../docs-demos/core/panel.html") Examples
      :code(lang="html")
        <body>
          <div id="app">
            <div class="panel panel-left panel-reveal panel-resizable panel-init">
              <div class="block">
                <p>Left Panel content here</p>
                <p><a class="panel-close" href="#">Close me</a></p>
                <p><a class="panel-open" href="#" data-panel=".panel-right-1">Open Right Panel</a></p>
              </div>
            </div>
            <div class="panel panel-right panel-right-1 panel-cover panel-resizable panel-init">
              <div class="block">
                <p>Right Panel content here</p>
                <p><a class="panel-close" href="#">Close me</a></p>
                <p><a class="panel-open" href="#" data-panel=".panel-left">Open Left Panel</a></p>
              </div>
            </div>
            <div class="panel panel-right panel-right-2 panel-cover panel-init theme-dark">
              <div class="page">
                <div class="block">
                  <p>Here comes another 3rd panel.</p>
                  <p><a class="panel-close" href="#">Close me</a></p>
                </div>
              </div>
            </div>
            <div class="view view-main view-init">
              <div class="page">
                <div class="navbar">
                  <div class="navbar-bg"></div>
                  <div class="navbar-inner">
                    <div class="left"></div>
                    <div class="title">Panels</div>
                    <div class="right"></div>
                  </div>
                </div>
                <div class="page-content">
                  <div class="block block-strong">
                    <p><a class="button panel-open" href="#" data-panel=".panel-left">Open Left Panel</a></p>
                    <p><a class="button panel-open" href="#" data-panel=".panel-right-1">Open Right Panel</a></p>
                    <p><a class="button panel-open" href="#" data-panel=".panel-right-2">Open Another Panel</a></p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </body>
      :code(lang="css")
        /* Limit resizable panel width */
        .panel {
          min-width: 100px;
          max-width: 90vw;
        }
      :code(lang="js")
        var app = new Framework7();

        var $$ = Dom7;

        // Dom Events
        $$('.panel-left').on('panel:open', function () {
          console.log('Panel left: open');
        });
        $$('.panel-left').on('panel:opened', function () {
          console.log('Panel left: opened');
        });

        // Instance Events
        var panelRight = app.panel.get('.panel-right-1');
        panelRight.on('open', function () {
          console.log('Panel right: open');
        });
        panelRight.on('opened', function () {
          console.log('Panel right: opened');
        });

        // App Events
        app.on('panelClose', function (panel) {
          console.log('Panel ' + panel.side + ': close');
        });
        app.on('panelClosed', function (panel) {
          console.log('Panel ' + panel.side + ': closed');
        });
        app.on('panelResize', function (panel, newPanelWidth) {
          console.log('Panel resized to ' + newPanelWidth + 'px');
        });





